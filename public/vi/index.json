[
{
	"uri": "//localhost:1313/vi/",
	"title": " Hướng dẫn triển khai ứng dụng Spring Boot trên AWS với Docker",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn triển khai ứng dụng Spring Boot trên AWS với Docker Thông tin chung Tài liệu này hướng dẫn triển khai một ứng dụng Spring Boot (backend API) sử dụng Docker trên Amazon EC2, tích hợp với Amazon ECR để lưu trữ Docker image, Amazon RDS cho cơ sở dữ liệu MySQL, và Nginx làm reverse proxy. Hướng dẫn được cập nhật với các tính năng AWS mới nhất (tính đến tháng 7/2025) và tối ưu hóa cho môi trường sản xuất, đồng thời tận dụng AWS Free Tier để giảm thiểu chi phí.\nMục tiêu Tạo và đẩy Docker image của ứng dụng Spring Boot lên Amazon ECR. Triển khai ứng dụng trên Amazon EC2 sử dụng Docker Compose. Sử dụng Nginx làm reverse proxy để điều hướng lưu lượng từ cổng 80 đến Spring Boot trên cổng 8080. Kết nối ứng dụng với cơ sở dữ liệu MySQL trên Amazon RDS (database first_cloud_users). Đảm bảo bảo mật, khả năng sẵn sàng cao (Multi-AZ), và dễ dàng dọn dẹp tài nguyên. Giả định Bạn đã có một Docker image Spring Boot (ví dụ: trungho93/identity-service:0.9.0) đã được kiểm tra hoạt động tốt trên môi trường cục bộ hoặc Docker Hub. Ứng dụng Spring Boot có cấu hình database trong file application.yml hoặc application.properties như sau: spring: datasource: url: ${DBMS_CONNECTION:jdbc:mysql://localhost:3306/first_cloud_users?useSSL=false\u0026amp;serverTimezone=UTC} driverClassName: com.mysql.cj.jdbc.Driver username: ${DBMS_USERNAME:root} password: ${DBMS_PASSWORD:09032003} jpa: hibernate: ddl-auto: update Ứng dụng sử dụng cổng 8080 (mặc định của Spring Boot). Bạn có quyền truy cập vào: AWS Management Console. AWS CLI (phiên bản 2.x). Docker CLI (phiên bản mới nhất). Cặp khóa SSH (file .pem) để truy cập EC2. Máy cục bộ có quyền root hoặc sudo để cài đặt công cụ. Bạn đã cài đặt MobaXterm để kết nối SSH vào EC2. Nội dung chính Chuẩn bị hạ tầng (VPC, Security Groups, IAM Role, DB Subnet Group). Tạo và đẩy Docker image lên Amazon ECR. Tạo EC2 instance. Cài đặt Docker, Nginx, và MySQL Client trên EC2. Tạo RDS database instance. Triển khai ứng dụng với Docker Compose. Kiểm tra ứng dụng. Dọn dẹp tài nguyên. Lưu ý quan trọng Mẹo hữu ích: Xem xét sử dụng Amazon ECS hoặc EKS để quản lý container trong môi trường sản xuất, thay vì chạy trực tiếp trên EC2. Bảo mật: Cấu hình Security Groups và VPC đúng cách, sử dụng AWS Secrets Manager để quản lý thông tin nhạy cảm. Chi phí: Theo dõi chi phí qua AWS Cost Explorer và dọn dẹp tài nguyên sau workshop để tránh phát sinh chi phí. "
},
{
	"uri": "//localhost:1313/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn triển khai ứng dụng Spring Boot trên AWS với Docker ℹ️ Thông tin: Tài liệu này hướng dẫn triển khai ứng dụng Spring Boot (Backend) trên Docker, sử dụng các dịch vụ AWS như EC2, RDS, và ECR, tích hợp Nginx làm reverse proxy. Hướng dẫn được cập nhật với các tính năng AWS mới nhất (tính đến năm 2025) và tối ưu hóa cho môi trường sản xuất.\nMục tiêu Triển khai ứng dụng Spring Boot từ Docker image trên Amazon ECR. Sử dụng Nginx làm reverse proxy để điều phối lưu lượng đến Backend. Kết nối ứng dụng với cơ sở dữ liệu MySQL trên Amazon RDS . Đảm bảo bảo mật, khả năng sẵn sàng cao (Multi-AZ), và dễ dàng dọn dẹp tài nguyên. Nội dung chính Chuẩn bị cơ sở hạ tầng Tạo và đẩy image lên Amazon ECR Tạo EC2 Instance Cài đặt Docker, Nginx, và MySQL Client trên EC2 Tạo RDS Database Instance Triển khai ứng dụng Spring Boot với Docker Compose Kiểm tra ứng dụng Dọn dẹp tài nguyên 💡 Mẹo hữu ích: Sử dụng Amazon ECS hoặc EKS thay vì chạy Docker trực tiếp trên EC2 để quản lý container hiệu quả hơn trong môi trường sản xuất.\n🔒 Lưu ý bảo mật: Đảm bảo cấu hình Security Groups và VPC đúng cách, hạn chế quyền truy cập, và sử dụng AWS Secrets Manager để quản lý thông tin nhạy cảm.\n⚠️ Cảnh báo: Theo dõi chi phí AWS qua AWS Cost Explorer và dọn dẹp tài nguyên sau khi hoàn thành để tránh phát sinh chi phí không cần thiết.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequisite-steps/2-1-vpc/",
	"title": "Tạo VPC",
	"tags": [],
	"description": "",
	"content": "1.1. Tạo VPC Truy cập Amazon VPC Console:\nMở trình duyệt và truy cập: https://console.aws.amazon.com/vpc/. Chọn Create VPC \u0026gt; VPC and more. Cấu hình VPC:\nName tag auto-generation: spring-boot-vpc. IPv4 CIDR block: 10.0.0.0/16. Availability Zones (AZs): Chọn ít nhất 2 AZs (ví dụ: us-east-1a, us-east-1b). Subnets: 2 public subnets (cho EC2). 2 private subnets (cho RDS). NAT Gateways: 1 per AZ (để private subnets truy cập internet). VPC endpoints: None (hoặc chọn S3 Gateway nếu cần). DNS options: Bật Enable DNS hostnames và Enable DNS resolution. Nhấn Create VPC. Xác minh:\nKiểm tra trong VPC Console để đảm bảo VPC spring-boot-vpc đã được tạo với 4 subnets (2 public, 2 private) và các tài nguyên liên quan (Internet Gateway, Route Tables, NAT Gateways). 1.2. Cấu hình Public Subnets Truy cập Subnets:\nTrong Amazon VPC Console, chọn Subnets. Đảm bảo các public subnets được đặt tên như: spring-boot-vpc-public-us-east-1a, spring-boot-vpc-public-us-east-1b. Bật Public IP:\nChọn từng public subnet, nhấn Actions \u0026gt; Edit subnet settings. Bật Enable auto-assign public IPv4 address. Nhấn Save. Xác minh:\nKiểm tra cả hai public subnets đã bật auto-assign Public IP. Lặp lại cho public subnet thứ hai. "
},
{
	"uri": "//localhost:1313/vi/2-prerequisite-steps/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Các bước chuẩn bị hạ tầng AWS Thông tin:\nTrước khi triển khai Amazon RDS và ứng dụng, bạn cần thiết lập môi trường mạng và bảo mật phù hợp. Các bước dưới đây sẽ giúp bạn chuẩn bị cơ sở hạ tầng cần thiết, đảm bảo an toàn và sẵn sàng cho các dịch vụ AWS.\nChecklist nhanh Đã có tài khoản AWS với quyền quản trị Đã xác định vùng (Region) triển khai (ví dụ: us-east-1) Đã chuẩn bị tên các tài nguyên (VPC, subnet, security group, v.v.) theo chuẩn đặt tên 1. Tạo VPC (Virtual Private Cloud) Mục đích:\nTạo một môi trường mạng ảo riêng biệt để cô lập tài nguyên AWS, tăng bảo mật và kiểm soát lưu lượng.\nThực hiện theo hướng dẫn chi tiết tại Tạo VPC Lưu ý: Chọn dải IP phù hợp, bật DNS hostnames và DNS resolution. 2. Tạo Subnet Mục đích:\nChia nhỏ VPC thành các subnet để triển khai đa vùng sẵn sàng (Multi-AZ), tách biệt subnet public (cho EC2) và private (cho RDS).\nThực hiện theo hướng dẫn tại Tạo VPC Lưu ý: Tạo ít nhất 2 public subnet (cho EC2) và 2 private subnet (cho RDS). Bật auto-assign public IP cho các public subnet. 3. Tạo Security Group cho EC2 Mục đích:\nKiểm soát lưu lượng mạng đến/đi từ máy chủ ứng dụng (EC2), đảm bảo chỉ cho phép các kết nối cần thiết.\nThực hiện theo hướng dẫn tại Tạo Security Group Lưu ý: Chỉ mở port 22 (SSH) cho IP của bạn. Mở port 80 (HTTP), 443 (HTTPS) cho public. Port 8080 chỉ mở cho Nginx hoặc để thử nghiệm. 4. Tạo Security Group cho RDS Mục đích:\nChỉ cho phép EC2 truy cập vào database, tăng bảo mật cho RDS.\nThực hiện theo hướng dẫn tại Tạo Security Group Lưu ý: Chỉ mở port 3306 (MySQL) cho security group của EC2. 5. Tạo DB Subnet Group Mục đích:\nChỉ định các subnet private mà Amazon RDS có thể sử dụng, đảm bảo database không public ra internet.\nThực hiện theo hướng dẫn tại Tạo DB Subnet Group Lưu ý: Chọn đúng 2 private subnet thuộc 2 AZ khác nhau. 6. Tạo IAM Role cho EC2 (để thao tác với ECR) Mục đích:\nCấp quyền cho EC2 instance có thể pull/push Docker image từ/to Amazon ECR.\nThực hiện theo hướng dẫn tại Tạo IAM Role cho ECR Lưu ý: Gắn đủ policy Read/Write cho ECR. Gán role này cho EC2 khi khởi tạo. Lỗi thường gặp \u0026amp; cách xử lý Không tạo đủ subnet hoặc chọn sai loại subnet → RDS/EC2 không khởi tạo được. Security group không mở đúng port → EC2 không SSH được, EC2 không kết nối được RDS. Không gán IAM role cho EC2 → Không pull/push được image từ ECR. Xác minh sau khi hoàn thành Vào từng console (VPC, EC2, RDS, IAM) kiểm tra lại tài nguyên đã tạo đúng tên, đúng cấu hình. Kiểm tra các subnet, security group, DB subnet group đã liên kết đúng VPC. Lưu lại ID các tài nguyên để sử dụng cho các bước tiếp theo. Tham khảo lệnh AWS CLI (nâng cao) Nếu muốn tự động hóa, bạn có thể tham khảo các lệnh AWS CLI tương ứng trong từng bước chi tiết.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequisite-steps/2-2-security-group/",
	"title": "Tạo Security Group",
	"tags": [],
	"description": "",
	"content": "1.3. Tạo Security Groups Security Group cho EC2 Truy cập Amazon EC2 Console: Mở: https://console.aws.amazon.com/ec2/. Chọn Security Groups \u0026gt; Create Security Group. Cấu hình Security Group: Name: ec2-sg. Description: \u0026ldquo;Security Group cho EC2 chạy Spring Boot và Nginx\u0026rdquo;. VPC: Chọn spring-boot-vpc. Inbound Rules: HTTP (80): Source 0.0.0.0/0 (cho phép tất cả để truy cập qua Nginx). HTTPS (443): Source 0.0.0.0/0 (cho môi trường sản xuất). Custom TCP (8080): Source 0.0.0.0/0 (chỉ để thử nghiệm, giới hạn từ Nginx trong sản xuất). SSH (22): Source \u0026lt;your-ip\u0026gt;/32 (thay \u0026lt;your-ip\u0026gt; bằng địa chỉ IP của bạn, ví dụ: 203.0.113.1/32). Outbound Rules: Mặc định (cho phép tất cả). Nhấn Create security group. Xác minh: Kiểm tra Security Group ec2-sg trong EC2 Console để đảm bảo các quy tắc đã được áp dụng đúng. Security Group cho RDS Truy cập Amazon VPC Console: Chọn Security Groups \u0026gt; Create security group. Cấu hình Security Group: Name: rds-sg. Description: \u0026ldquo;Security Group cho RDS MySQL\u0026rdquo;. VPC: Chọn spring-boot-vpc. Inbound Rule: Type: MySQL/Aurora. Port: 3306. Source: Chọn Security Group ec2-sg (cho phép EC2 truy cập RDS). Outbound Rules: Mặc định (cho phép tất cả). Nhấn Create security group. Xác minh: Kiểm tra Security Group rds-sg để đảm bảo chỉ cho phép kết nối từ ec2-sg trên cổng 3306. "
},
{
	"uri": "//localhost:1313/vi/2-prerequisite-steps/2-3-db-subnet/",
	"title": "Tạo DB Subnet Group",
	"tags": [],
	"description": "",
	"content": "1.4. Tạo DB Subnet Group Truy cập Amazon RDS Console: Mở: https://console.aws.amazon.com/rds/. Chọn Subnet groups \u0026gt; Create DB Subnet Group. Cấu hình DB Subnet Group: Name: rds-subnet-group. Description: \u0026ldquo;DB Subnet Group cho Spring Boot\u0026rdquo;. VPC: Chọn spring-boot-vpc. Add subnets: Chọn 2 private subnets (ví dụ: spring-boot-vpc-private-us-east-1a, spring-boot-vpc-private-us-east-1b). Nhấn Create. Xác minh: Kiểm tra trong RDS Console để đảm bảo rds-subnet-group đã được tạo với 2 private subnets. "
},
{
	"uri": "//localhost:1313/vi/3-create-ecr/",
	"title": "Tạo ECR Repository",
	"tags": [],
	"description": "",
	"content": "2.1. Tạo ECR Repository Truy cập Amazon ECR Console: Mở: https://console.aws.amazon.com/ecr/. Chọn Create repository. Cấu hình Repository: Repository name: spring-boot-app. Tag immutability: Chọn Mutable. Scan on push: Bật để quét lỗ hổng bảo mật. Nhấn Create repository. Lưu URI: Ghi lại URI của repository, ví dụ: \u0026lt;account-id\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/spring-boot-app. 2.2. Đẩy Docker image lên ECR Chuẩn bị mã nguồn ứng dụng:\nClone project Spring Boot từ GitHub (hoặc chuẩn bị mã nguồn): git clone https://github.com/MTrung0903/identity-service.git cd \u0026lt;thu-muc-project\u0026gt; Đảm bảo có file Dockerfile ở thư mục gốc. Nếu chưa có, tạo file với nội dung sau: FROM maven:3.9.8-amazoncorretto-21 AS build WORKDIR /app COPY pom.xml . COPY src ./src RUN mvn package -DskipTests FROM amazoncorretto:21.0.4 WORKDIR /app COPY --from=build /app/target/*.jar app.jar ENTRYPOINT [\u0026#34;java\u0026#34;, \u0026#34;-jar\u0026#34;, \u0026#34;app.jar\u0026#34;] Build file JAR Spring Boot (nếu dùng Maven): ./mvnw clean package # hoặc mvn clean package Build Docker image: docker build -t \u0026lt;ten-image-cua-ban\u0026gt;:\u0026lt;tag\u0026gt; . Đảm bảo Docker image cục bộ:\nXác minh image Spring Boot cục bộ (ví dụ: trungho93/identity-service:0.9.0): docker images Đăng nhập vào ECR:\nChạy: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin \u0026lt;account-id\u0026gt;.dkr.ecr.us-east-1.amazonaws.com Thay \u0026lt;account-id\u0026gt; bằng ID tài khoản AWS của bạn (ví dụ: 238702553701). Kết quả: Login Succeeded. Tag và đẩy image:\nTag image:\ndocker tag trungho93/identity-service:0.9.0 \u0026lt;account-id\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/spring-boot-app:latest Đẩy image:\ndocker push \u0026lt;account-id\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/spring-boot-app:latest 5. Xác minh:\nTruy cập ECR Console, chọn repository spring-boot-app, kiểm tra image . "
},
{
	"uri": "//localhost:1313/vi/4-create-ec2/",
	"title": "Tạo EC2",
	"tags": [],
	"description": "",
	"content": "3. Tạo EC2 Instance Truy cập Amazon EC2 Console: Mở: https://console.aws.amazon.com/ec2/. Chọn Launch instance. Cấu hình EC2: Name: spring-boot-ec2. OS Image: Chọn Ubuntu Server 24.04 LTS. Instance type: t3.medium (2 vCPU, 4 GB RAM, Free Tier eligible). Key pair: Tạo mới (spring-boot-key) hoặc chọn cặp khóa .pem hiện có. Network settings: VPC: Chọn spring-boot-vpc. Subnet: Chọn public subnet (ví dụ: spring-boot-vpc-public-us-east-1a). Auto-assign public IP: Bật Enable. Security Group: Chọn ec2-sg. Nhấn Launch instance. Gắn IAM Role: Trong EC2 Console, chọn instance spring-boot-ec2. Nhấn Actions \u0026gt; Security \u0026gt; Modify IAM role. Chọn role CustomRWECRRole. Nhấn Update IAM role. Xác minh: Kiểm tra instance spring-boot-ec2 trong trạng thái Running và có Public IP. 4. Kết nối SSH vào EC2 Instance bằng MobaXterm 4.1. Cài đặt MobaXterm Tải MobaXterm: Truy cập: https://mobaxterm.mobatek.net/. Tải và cài đặt phiên bản mới nhất (Portable hoặc Installer). 4.2. Tạo phiên SSH Mở MobaXterm, nhấn Session \u0026gt; SSH. Cấu hình: Remote host: Nhập Public IP hoặc Public DNS của EC2 (ví dụ: ec2-54-123-45-67.compute-1.amazonaws.com). Specify username: Nhập ubuntu (cho Ubuntu AMI). Use private key: Trong Advanced SSH settings, bật Use private key, chọn file .pem (ví dụ: spring-boot-key.pem). Nhấn OK để kết nối. 4.3. Xác minh kết nối Nếu kết nối thành công, bạn sẽ thấy terminal EC2 trong MobaXterm. 5. Cài đặt Docker, Nginx, và MySQL Client trên EC2 SSH vào EC2:\nSử dụng MobaXterm để kết nối vào EC2. Cài đặt Docker:\nChạy: sudo apt update -y sudo apt upgrade -y sudo apt install -y ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;) stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt update sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin sudo usermod -aG docker ubuntu Đăng xuất và đăng nhập lại SSH: exit Kết nối lại qua MobaXterm. Kiểm tra Docker: docker --version 3. Cài đặt Nginx:\nChạy: sudo apt install -y nginx sudo systemctl start nginx sudo systemctl enable nginx Kiểm tra trạng thái: sudo systemctl status nginx Cài đặt MySQL Client:\nChạy: sudo apt install -y mysql-client Kiểm tra: mysql --version Cài đặt AWS CLI trên EC2:\nChạy: sudo apt update sudo apt install -y unzip curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install Kiểm tra: aws --version "
},
{
	"uri": "//localhost:1313/vi/2-prerequisite-steps/2-4-create-iam/",
	"title": "Tạo IAM Role cho ECR",
	"tags": [],
	"description": "",
	"content": "1.5. Tạo IAM Role cho ECR Truy cập IAM Console: Mở: https://console.aws.amazon.com/iam/. Tạo Policy đọc ECR: Chọn Policies \u0026gt; Create Policy. Chọn dịch vụ Elastic Container Registry. Permissions: List: DescribeImages, ListImages. Read: BatchGetImage, DescribeRepositories, GetAuthorizationToken, GetAccountSetting. Resources: Chọn Any in this account. Policy name: ReadECRRepositoryContent. Description: \u0026ldquo;Cho phép kéo images và xem thông tin repository\u0026rdquo;. Nhấn Create policy. Tạo Policy ghi ECR: Tương tự, chọn Elastic Container Registry. Permissions: Read: BatchCheckLayerAvailability, GetAuthorizationToken. Write: CompleteLayerUpload, InitiateLayerUpload, PutImage, UploadLayerPart. Resources: Chọn Any in this account. Policy name: WriteECRRepositoryContent. Description: \u0026ldquo;Cho phép đẩy và xóa images\u0026rdquo;. Nhấn Create policy. Tạo IAM Role: Chọn Roles \u0026gt; Create role \u0026gt; AWS service \u0026gt; EC2. Gắn 2 policy: ReadECRRepositoryContent, WriteECRRepositoryContent. Role name: CustomRWECRRole. Description: \u0026ldquo;Role cho phép đọc và ghi ECR\u0026rdquo;. Nhấn Create role. Xác minh: Kiểm tra trong IAM Console để đảm bảo role CustomRWECRRole đã được tạo và gắn đúng policies. "
},
{
	"uri": "//localhost:1313/vi/2-prerequisite-steps/2-5-install-acli/",
	"title": "Cài đặt AWS CLI trên máy cục bộ",
	"tags": [],
	"description": "",
	"content": "1.6. Cài đặt AWS CLI trên máy cục bộ Tải file cài đặt:\nTruy cập: https://awscli.amazonaws.com/AWSCLIV2.msi. Tải file AWSCLIV2.msi (cho Windows) vào thư mục mặc định (ví dụ: C:\\Users\\\u0026lt;YourUser\u0026gt;\\Downloads). Chạy trình cài đặt:\nTìm file AWSCLIV2.msi, nhấp đúp để chạy. Làm theo hướng dẫn: Nhấn Next để tiếp tục. Chấp nhận License Agreement và nhấn Next. Giữ mặc định thư mục cài đặt (C:\\Program Files\\Amazon\\AWSCLIV2) và nhấn Next. Nhấn Install, cấp quyền Administrator nếu được yêu cầu. Nhấn Finish để hoàn tất. Kiểm tra cài đặt:\nMở Command Prompt hoặc PowerShell (Win + R, gõ cmd hoặc powershell). Chạy: aws --version Kết quả ví dụ: aws-cli/2.27.50 Python/3.13.4 Windows/11 exe/AMD64. Nếu báo lỗi aws is not recognized, kiểm tra biến PATH: Nhấn Win + R, gõ sysdm.cpl, vào tab Advanced \u0026gt; Environment Variables. Trong System Variables, tìm Path, thêm C:\\Program Files\\Amazon\\AWSCLIV2 nếu chưa có. Mở lại Command Prompt/PowerShell và thử lại. Cấu hình AWS CLI:\nChạy: aws configure Nhập thông tin: AWS Access Key ID: Lấy từ AWS Management Console: Đăng nhập: https://console.aws.amazon.com/iam/. Vào Users \u0026gt; Chọn user IAM \u0026gt; Security credentials \u0026gt; Create access key. Chọn Command Line Interface (CLI), tải file CSV chứa Access Key ID và Secret Access Key. AWS Secret Access Key: Nhập từ file CSV. Default region name: Nhập us-east-1 (hoặc vùng bạn chọn). Default output format: Nhập json hoặc nhấn Enter để dùng mặc định. Thông tin được lưu vào: C:\\Users\\\u0026lt;YourUser\u0026gt;\\.aws\\credentials C:\\Users\\\u0026lt;YourUser\u0026gt;\\.aws\\config "
},
{
	"uri": "//localhost:1313/vi/5-create-rds-database/",
	"title": "Create RDS database",
	"tags": [],
	"description": "",
	"content": "6. Tạo RDS Database Instance Truy cập Amazon RDS Console:\nMở: https://console.aws.amazon.com/rds/. Chọn Create database. Cấu hình RDS:\nMethod: Standard create. Engine: MySQL. Version: MySQL 8.0 (mới nhất). Template: Free tier. Multi-AZ: DB instance (cho khả năng sẵn sàng cao). DB instance identifier: spring-boot-rds. Master username: admin. Master password: Nhập mật khẩu an toàn (ví dụ: SecurePass123!) hoặc chọn auto-generate. Instance class: db.t3.micro (Free Tier eligible). Storage: 20 GB, General Purpose SSD. VPC: Chọn spring-boot-vpc. DB Subnet Group: Chọn rds-subnet-group. Security Group: Chọn rds-sg. Nhấn Create database. Lưu thông tin RDS:\nGhi lại: Endpoint: Ví dụ spring-boot-rds.cghg6wmuybac.us-east-1.rds.amazonaws.com. Port: 3306. Username: admin. Password: Mật khẩu đã thiết lập. Kiểm tra kết nối RDS từ EC2:\nTrong MobaXterm, chạy: mysql -h spring-boot-rds.cghg6wmuybac.us-east-1.rds.amazonaws.com -u admin -p Nhập mật khẩu RDS. Tạo và kiểm tra database: SHOW DATABASES; "
},
{
	"uri": "//localhost:1313/vi/6-deploy-with-docker-compose/",
	"title": "Triển khai ứng dụng Spring Boot với Docker Compose",
	"tags": [],
	"description": "",
	"content": "7. Triển khai ứng dụng Spring Boot với Docker Compose 7.1. Đăng nhập vào Amazon ECR từ EC2 Trong terminal MobaXterm, chạy: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin \u0026lt;account-id\u0026gt;.dkr.ecr.us-east-1.amazonaws.com Thay \u0026lt;account-id\u0026gt; bằng ID tài khoản AWS. Kết quả: Login Succeeded. 7.2. Tạo file Docker Compose Tạo thư mục:\nTrong terminal EC2: mkdir spring-boot-app \u0026amp;\u0026amp; cd spring-boot-app Tạo file docker-compose.yml:\nChạy: nano docker-compose.yml Dán nội dung sau, thay các giá trị \u0026lt;account-id\u0026gt;, \u0026lt;region\u0026gt;, \u0026lt;RDS Endpoint\u0026gt;, và \u0026lt;RDS Password\u0026gt;: version: \u0026#39;3.8\u0026#39; services: nginx: image: nginx:latest ports: - \u0026#34;80:80\u0026#34; volumes: - ./nginx.conf:/etc/nginx/conf.d/app.conf depends_on: - backend networks: - app-network backend: image: \u0026lt;account-id\u0026gt;.dkr.ecr.\u0026lt;region\u0026gt;.amazonaws.com/spring-boot-app:latest ports: - \u0026#34;8080:8080\u0026#34; environment: - SPRING_DATASOURCE_URL=jdbc:mysql://\u0026lt;RDS Endpoint\u0026gt;:3306/first_cloud_users?useSSL=false\u0026amp;serverTimezone=UTC - SPRING_DATASOURCE_USERNAME=admin - SPRING_DATASOURCE_PASSWORD=\u0026lt;RDS Password\u0026gt; - SPRING_JPA_HIBERNATE_DDL_AUTO=update networks: - app-network networks: app-network: driver: bridge Lưu file: Nhấn Ctrl+O, Enter, Ctrl+X. 7.3. Tạo file cấu hình Nginx Tạo file nginx.conf: Chạy: nano nginx.conf Dán nội dung: server { listen 80; server_name _; location / { proxy_pass http://backend:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } Lưu file: Nhấn Ctrl+O, Enter, Ctrl+X. 7.4. Chạy Docker Compose Kiểm tra file cấu hình:\nĐảm bảo docker-compose.yml và nginx.conf đã được tạo trong thư mục spring-boot-app. Chạy container:\nChạy: sudo docker compose -f docker-compose.yml up -d Xác minh:\nKiểm tra container: docker ps Bạn sẽ thấy 2 container: nginx và backend. "
},
{
	"uri": "//localhost:1313/vi/7-application-check/",
	"title": "Kiểm tra ứng dụng",
	"tags": [],
	"description": "",
	"content": "8. Kiểm tra ứng dụng Truy cập ứng dụng: Mở trình duyệt hoặc Postman, truy cập: http://\u0026lt;EC2-Public-IP\u0026gt;/api/\u0026lt;endpoint\u0026gt; Ví dụ: Nếu Spring Boot có endpoint /api/users, truy cập http://\u0026lt;EC2-Public-IP\u0026gt;/api/users. Kiểm tra log nếu có lỗi: Log container Spring Boot: sudo docker logs \u0026lt;container-id-backend\u0026gt; Thay \u0026lt;container-id-backend\u0026gt; bằng ID của container backend (lấy từ docker ps). Log Nginx: sudo tail -f /var/log/nginx/error.log "
},
{
	"uri": "//localhost:1313/vi/8-clean-resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "9. Dọn dẹp tài nguyên Để tránh phát sinh chi phí:\nDừng và xóa container:\nTrong terminal EC2: cd spring-boot-app sudo docker compose -f docker-compose.yml down Xóa ECR Repository:\nTruy cập ECR Console, chọn spring-boot-app \u0026gt; Delete. Xóa EC2 Instance:\nTruy cập EC2 Console, chọn spring-boot-ec2 \u0026gt; Actions \u0026gt; Instance State \u0026gt; Terminate instance. Xóa RDS Instance:\nTruy cập RDS Console, chọn spring-boot-rds \u0026gt; Actions \u0026gt; Delete, nhập delete me. Xóa Security Groups:\nTruy cập VPC Console, chọn ec2-sg và rds-sg \u0026gt; Actions \u0026gt; Delete security group. Xóa IAM Role:\nTruy cập IAM Console, chọn CustomRWECRRole \u0026gt; Delete. Xóa VPC:\nTruy cập VPC Console, chọn spring-boot-vpc \u0026gt; Actions \u0026gt; Delete VPC, đảm bảo xóa hết tài nguyên phụ thuộc. "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]